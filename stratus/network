import hudson.model.*
properties([
    buildDiscarder(
        logRotator(
            numToKeepStr: '50'
        )
    ),
    disableConcurrentBuilds(),
   parameters([
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: '',
            filterLength: 1,
            filterable: true,
            name: 'BRANCH',
            randomName: 'choice-parameter-701135814027628',
            referencedParameters: '',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script: ''],
                script: [
                        classpath: [],
                        sandbox: false,
                        script:
                            '''
default_branch = [ "backend/develop","master"]
def command = "curl -H Private-Token:bjsjzzMuVrja_cBvuDBx https://git.synesis.ru/api/v4/projects/4/repository/branches?search=release'&'per_page=100 | jq -r 'sort_by(.commit.committed_date) | .[].name' | tail -n 3"
def command1 = "curl -H Private-Token:bjsjzzMuVrja_cBvuDBx https://git.synesis.ru/api/v4/projects/4/merge_requests?state=opened'&'labels=Ready%20for%20test  | jq -r '.[].source_branch'"
def release_branch = ['bash', '-c', command].execute().text.readLines()
def merge_branch = ['bash', '-c', command1].execute().text.readLines()

all_branch = []
all_branch += default_branch
all_branch += merge_branch
all_branch += release_branch
return  all_branch
                            '''
                ]
            ]
        ],
      [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: '',
            filterLength: 1,
            filterable: false,
            name: 'STAGE',
            randomName: 'choice-parameter-701135814027428',
            referencedParameters: '',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script: ''],
                script: [
                        classpath: [],
                        sandbox: false,
                        script:
                            '''
def user = jenkins.model.Jenkins.getAuthentication().getName();
returnValue = ["gem-stage-1","gem-stage-2"]
switch (user) {
   case ['denis.galka','alex.saskevich','maxim.protasevich','andrei.dorohovich','sergey.kruk','sg.adm']:
     returnValue += ["gem-preprod","gem-im"]
     break;
}
return returnValue
                            '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: '',
            filterLength: 1,
            filterable: true,
            name: 'BRANCH_CLIENT',
            randomName: 'choice-parameter-701135814027528',
            referencedParameters: '',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script: ''],
                script: [
                        classpath: [],
                        sandbox: false,
                        script:
                            '''
def command = "curl -s -u gem_4me_admin:YEdKuWGLfvdhxWfbW2ME https://api.bitbucket.org/2.0/repositories/gem_4me/gem-network-contract/refs/branches\?pagelen\=10 | jq -r '.values[].name'"
return  command
                            '''
                ]
            ]
        ]
   ])
])
pipeline{
    agent any
    stages{
        stage("SCM"){
            steps {
                checkout([
                $class: 'GitSCM',
                branches: [[name: '${BRANCH}']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'CleanBeforeCheckout']],
                submoduleCfg: [],
                userRemoteConfigs: [[
                    credentialsId: '342a4a2a-89ce-49cf-9f98-26aef2377952', url: 'git@git.synesis.ru:GEM/gem-im.git'
                    ]]
                    ])
            }
        }
        stage("Run tests and deploy after manually started"){
            steps{
                script{
                    wrap([$class: 'BuildUser']){
                        currentBuild.displayName = "#${BUILD_NUMBER}"
                        currentBuild.description = "Started by $BUILD_USER"
                        sh  '''
                            set -e
                            GIT_COMMIT=$(git log -n 1 --pretty=format:'%h')
                            PATH=/usr/local/opt/swagger-codegen@2/bin:/Users/svc_gem_mac/google-cloud-sdk/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
                            JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk/Contents/Home
                            if [[ $(echo $BRANCH | grep -o release-* | wc -l) -eq 1 ]]
                            then
                            TASK_NUMBER=$(echo $BRANCH | grep -o release-.* | sed 's|release-/|' | tr A-Z a-z )
                            elif [[ $(echo $BRANCH | grep -E -o GEM-[0-9]* | wc -l) -eq 1 ]]
                            then
                            TASK_NUMBER=`echo $BRANCH | grep -E -o GEM-[0-9]* | egrep -o [0-9].*`
                            else
                            TASK_NUMBER=$(echo $BRANCH | sed 's|backend/||')
                            fi
                            echo $TASK_NUMBER
                            if [[ $STAGE = "gem-stage-1" ]] || [[ $STAGE = "gem-stage-2" ]]
                            then
                            APP_VERSION=$(echo "$BUILD_USER" | awk '{print tolower($2)}')
                            else
                            APP_VERSION="$TASK_NUMBER-$GIT_COMMIT"
                            fi
                            SWAGGER_JSON="https://${APP_VERSION}-dot-${STAGE}.appspot.com/swagger.json"
                            echo Run tests and deploy to $STAGE after manually started
                            echo ############################## GRADLE PARAMETERS BLOCK ##########################
                            echo :gem:clean :gem:appengineDeploy -PappName=$STAGE -PappVersion=$APP_VERSION -PappBuild=$GIT_COMMIT
                            echo ############################## END OF GRADLE PARAMETERS BLOCK ###################
                            gcloud config set account jenkins@$STAGE.iam.gserviceaccount.com
                            ./gradlew :gem:clean :gem:appengineDeploy -PappName=$STAGE -PappVersion=$APP_VERSION -PappBuild=$GIT_COMMIT
                            rm -rf gemnetworkcontract
                            git clone git@git.synesis.ru:GEM/gemnetworkcontract.git
                            cd gemnetworkcontract
                            git checkout ${BRANCH_CLIENT}
                            git pull origin ${BRANCH_CLIENT}
                            cp /usr/local/Cellar/swagger-codegen@2/2.4.19/libexec/swagger-codegen-cli.jar .
                            ./generate.sh ${SWAGGER_JSON} ${BRANCH_CLIENT}
                            '''
                    }
                }
            }
        }
    }
}

